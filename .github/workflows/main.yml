name: HomeGuard CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: homeguard_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      PYTHON_VERSION: '>=3.0'  # Allow any Python version above 3.0
      FLASK_APP: app.py  # Adjust this to your Flask application's main file
      FLASK_ENV: development  # Set the Flask environment (development/production)

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up the database
        run: |
          # Adjust this section based on your Flask database setup commands
          # Example: flask db init, flask db migrate, flask db upgrade
          echo "Skipping database migrations for Flask setup"

      - name: Run tests
        run: |
          # Replace with your Flask test commands (e.g., pytest)
          pytest

      - name: Collect static files
        run: |
          # Modify this command as per your Flask application's requirements
          echo "Skipping collectstatic for Flask"

      # Deployment and notification steps are commented out for now
      # Uncomment and adjust as per your deployment and notification needs

      # - name: Deploy to server
      #   if: github.ref == 'refs/heads/main'
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      #   run: |
      #     echo "Deploying to server"
      #     mkdir -p ~/.ssh
      #     echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      #     scp -r * $SSH_USERNAME@$SSH_HOST:/path/to/deployment/
      #     ssh $SSH_USERNAME@$SSH_HOST << 'EOF'
      #       cd /path/to/deployment/
      #       source venv/bin/activate
      #       pip install -r requirements.txt
      #       # Adjust Flask specific deployment commands here
      #     EOF

      # - name: Send notification
      #   run: |
      #     # Placeholder for notification logic
      #     echo "Sending notification"


